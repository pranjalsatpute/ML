#import the necessary libraries 
import tensorflow as tf
from tensorflow.keras.datasets import boston_housing
from sklearn import preprocessing

#load the data and then split it into training and testing data
(train_x,train_y),(test_x,test_y) = boston_housing.load_data()

#print the dataset shape
print("train shape :",train_x.shape)
print("Test shape :",test_x.shape)
print("Actual Train Output",train_y.shape)
print("Actual Test Output",test_y.shape)

#indexing
train_x
train_x[0]
test_x[0]
train_y[0]

#normalize the matrix of features
train_x=preprocessing.normalize(train_x)
test_x=preprocessing.normalize(test_x)

train_x[0]
train_y[0]

#to build neural network import the libraries
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import *

#define the model
def HousePricePredictionModel():
  model=Sequential()
  model.add(Dense(128,activation='relu',input_shape=(train_x[0].shape)))
  model.add(Dense(64,activation='relu'))
  model.add(Dense(32,activation='relu'))
  model.add(Dense(1))
  model.compile(optimizer='rmsprop',loss='mse',metrics=['mae'])
  return model
  
#add some extra variables
import numpy as np
k=4
num_val_samples= len(train_x)
num_epochs = 100
all_scores = []

#train the model
model = HousePricePredictionModel()
history=model.fit(x=train_x,y=train_y,epochs= num_epochs,batch_size=1,verbose=1,validation_data=(test_x,test_y))

test = [[0.02675675, 0.        , 0.02677953, 0.        , 0.0010046 ,
        0.00951931, 0.14795322, 0.0027145 , 0.03550877, 0.98536841,
        0.02988655, 0.04031725, 0.04298041]]
print("Actual Output: ", train_y[0])
print("Predicted Output: ", model.predict(test))
